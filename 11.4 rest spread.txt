Theara Ya
September 10, 2023
Rest / Spread Operator Exercises


Given this function:
====================
function filterOutOdds() {
  var nums = Array.prototype.slice.call(arguments);
  return nums.filter(function(num) {
    return num % 2 === 0
  });
}

Refactor it to use the rest operator & an arrow function:
=========================================================
const filterOutOdds = (...args) => args.filter( num => num % 2 === 0);


const findMin = (...args) => Math.min(...args);

const mergeObjects = (o1, o2) => ({...o1, ...o2});

const doubleAndReturnArgs = (arr, ...args) => [...arr, ...args.map( n => n * 2)];

const removeRandom = (items) => {
    let randI = Math.floor(Math.random() * items.length);
    return [...items.slice(0, randI), ...items.slice(randI + 1)];
};

const removeRandom = (items) => {
    let randI = Math.floor(Math.random() * items.length);
    let {[randI]: deleted, ...undeleted} = items;
    return Object.values(end);
};

const extend = (arr1, arr2) => [...arr1, ...arr2];

const addKeyVal = (obj, key, value) => ({...obj, ...{[key]: value}});

const removeKey = (obj, key) => {
    let {[key]: newName , ...rest} = obj;
    return rest;
}

const removeKey = (obj, key) => {
    let {[key]: temp, ...rest} = obj;
    return rest;
}

const combine = (obj1, obj2) => ({...obj1, ...obj2});

const update = (obj, key, value) => ({...obj, ...{[key]: value}});